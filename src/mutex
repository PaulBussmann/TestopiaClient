/**************************************************************************
 *
 * The GNU Lesser General Public License (LGPL)
 * 
 * Copyright (c) 2015 PaulBussmann
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 ***************************************************************************/

#pragma once
#ifndef _MUTEX_
#define _MUTEX_

#if defined(__GNUC__)
#include <pthread.h>
#endif

namespace std
{
/// trivial implementation of mutex class for pre-C++ 2011 compilers
class mutex
{
public:
	mutex()
	{
#if defined(__GNUC__)
        pthread_mutexattr_t MutexAttr;
        pthread_mutexattr_init(&MutexAttr);
        pthread_mutexattr_settype(&MutexAttr, PTHREAD_MUTEX_RECURSIVE_NP);
        pthread_mutex_init(&m_Mutex, &MutexAttr);
        pthread_mutexattr_destroy(&MutexAttr);
#else
        InitializeCriticalSection(&m_Sec);
#endif
	}

	~mutex()
	{
#if defined(__GNUC__)
        pthread_mutex_destroy(&m_Mutex);
#else
        DeleteCriticalSection(&m_Sec);
#endif
	}

	void lock()
	{
#if defined(__GNUC__)
        pthread_mutex_lock(&m_Mutex);
#else
        EnterCriticalSection(&m_Sec);
#endif
	}
	void unlock()
	{
#if defined(__GNUC__)
        pthread_mutex_unlock(&m_Mutex);
#else
        LeaveCriticalSection(&m_Sec);
#endif
	}
#if defined(__GNUC__)
    pthread_mutex_t  m_Mutex;
#else
	CRITICAL_SECTION m_Sec;
#endif
};
}

#endif /* _MUTEX_ */